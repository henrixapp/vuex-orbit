import { Schema } from '@orbit/data';
import VuexStore from './vuex-store';
import { createLocalVue } from '@vue/test-utils';
import Vuex from "vuex";
var localVue = createLocalVue();
localVue.use(Vuex);
// @ts-ignore
var schemaDefinition = {
    models: {
        pet: {
            attributes: {
                name: {
                    type: "string"
                }
            }
        },
        species: {
            attributes: {
                name: {
                    type: "string"
                }
            }
        }
    }
};
var schema = new Schema(schemaDefinition);
var vStore = new VuexStore({ schema: schema });
var store = new Vuex.Store({
    modules: {
        vStore: vStore
    },
    strict: true,
    plugins: []
});
describe("simple example", function () {
    beforeEach(function () {
        vStore = new VuexStore({ schema: schema });
        store = new Vuex.Store({
            modules: {
                vStore: vStore
            },
            strict: true,
            plugins: []
        });
    });
    test("models present", function () {
        expect(store.getters.getField('petCollection')).toMatchObject([]);
        expect(store.getters.getField('pet')).toBeNull();
        expect(store.getters.getField('speciesCollection')).toMatchObject([]);
        expect(store.getters.getField('species')).toBeNull();
    });
    test("adding works", function (done) {
        store.dispatch('create', {
            type: 'pet',
            attributes: {
                name: 'Garfield'
            }
        }).then(function () {
            console.log(store.getters.getField('petCollection'));
            expect(store.getters.getField('pet.attributes.name')).toBe("Garfield");
            done();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZ1ZXgtc3RvcmUudGVzdC5qcyJdLCJuYW1lcyI6WyJTY2hlbWEiLCJWdWV4U3RvcmUiLCJjcmVhdGVMb2NhbFZ1ZSIsIlZ1ZXgiLCJsb2NhbFZ1ZSIsInVzZSIsInNjaGVtYURlZmluaXRpb24iLCJtb2RlbHMiLCJwZXQiLCJhdHRyaWJ1dGVzIiwibmFtZSIsInR5cGUiLCJzcGVjaWVzIiwic2NoZW1hIiwidlN0b3JlIiwic3RvcmUiLCJTdG9yZSIsIm1vZHVsZXMiLCJzdHJpY3QiLCJwbHVnaW5zIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwidGVzdCIsImV4cGVjdCIsImdldHRlcnMiLCJnZXRGaWVsZCIsInRvTWF0Y2hPYmplY3QiLCJ0b0JlTnVsbCIsImRpc3BhdGNoIiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJ0b0JlIiwiZG9uZSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsTUFBVCxRQUF1QixhQUF2QjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsY0FBdEI7QUFDQSxTQUFTQyxjQUFULFFBQStCLGlCQUEvQjtBQUNBLE9BQU9DLElBQVAsTUFBaUIsTUFBakI7QUFDQSxJQUFNQyxXQUFXRixnQkFBakI7QUFDQUUsU0FBU0MsR0FBVCxDQUFhRixJQUFiO0FBQ0E7QUFDQSxJQUFNRyxtQkFBbUI7QUFDckJDLFlBQVE7QUFDSkMsYUFBSztBQUNEQyx3QkFBWTtBQUNSQyxzQkFBTTtBQUNGQywwQkFBTTtBQURKO0FBREU7QUFEWCxTQUREO0FBUUpDLGlCQUFTO0FBQ0xILHdCQUFZO0FBQ1JDLHNCQUFNO0FBQ0ZDLDBCQUFNO0FBREo7QUFERTtBQURQO0FBUkw7QUFEYSxDQUF6QjtBQWtCQSxJQUFNRSxTQUFTLElBQUliLE1BQUosQ0FBV00sZ0JBQVgsQ0FBZjtBQUNBLElBQUlRLFNBQVMsSUFBSWIsU0FBSixDQUFjLEVBQUVZLGNBQUYsRUFBZCxDQUFiO0FBQ0EsSUFBSUUsUUFBUSxJQUFJWixLQUFLYSxLQUFULENBQWU7QUFDdkJDLGFBQVM7QUFDTEg7QUFESyxLQURjO0FBSXZCSSxZQUFRLElBSmU7QUFLdkJDLGFBQVM7QUFMYyxDQUFmLENBQVo7QUFPQUMsU0FBUyxnQkFBVCxFQUEyQixZQUFNO0FBQzdCQyxlQUFXLFlBQU07QUFDYlAsaUJBQVMsSUFBSWIsU0FBSixDQUFjLEVBQUVZLGNBQUYsRUFBZCxDQUFUO0FBQ0FFLGdCQUFRLElBQUlaLEtBQUthLEtBQVQsQ0FBZTtBQUNuQkMscUJBQVM7QUFDTEg7QUFESyxhQURVO0FBSW5CSSxvQkFBUSxJQUpXO0FBS25CQyxxQkFBUztBQUxVLFNBQWYsQ0FBUjtBQU9ILEtBVEQ7QUFVQUcsU0FBSyxnQkFBTCxFQUF1QixZQUFNO0FBQ3pCQyxlQUFPUixNQUFNUyxPQUFOLENBQWNDLFFBQWQsQ0FBdUIsZUFBdkIsQ0FBUCxFQUFnREMsYUFBaEQsQ0FBOEQsRUFBOUQ7QUFDQUgsZUFBT1IsTUFBTVMsT0FBTixDQUFjQyxRQUFkLENBQXVCLEtBQXZCLENBQVAsRUFBc0NFLFFBQXRDO0FBQ0FKLGVBQU9SLE1BQU1TLE9BQU4sQ0FBY0MsUUFBZCxDQUF1QixtQkFBdkIsQ0FBUCxFQUFvREMsYUFBcEQsQ0FBa0UsRUFBbEU7QUFDQUgsZUFBT1IsTUFBTVMsT0FBTixDQUFjQyxRQUFkLENBQXVCLFNBQXZCLENBQVAsRUFBMENFLFFBQTFDO0FBQ0gsS0FMRDtBQU1BTCxTQUFLLGNBQUwsRUFBcUIsZ0JBQVE7QUFDekJQLGNBQU1hLFFBQU4sQ0FBZSxRQUFmLEVBQXlCO0FBQ3JCakIsa0JBQU0sS0FEZTtBQUVyQkYsd0JBQVk7QUFDUkMsc0JBQU07QUFERTtBQUZTLFNBQXpCLEVBS0dtQixJQUxILENBS1EsWUFBTTtBQUNWQyxvQkFBUUMsR0FBUixDQUFZaEIsTUFBTVMsT0FBTixDQUFjQyxRQUFkLENBQXVCLGVBQXZCLENBQVo7QUFDQUYsbUJBQU9SLE1BQU1TLE9BQU4sQ0FBY0MsUUFBZCxDQUF1QixxQkFBdkIsQ0FBUCxFQUFzRE8sSUFBdEQsQ0FBMkQsVUFBM0Q7QUFDQUM7QUFDSCxTQVREO0FBVUgsS0FYRDtBQVlILENBN0JEIiwiZmlsZSI6InZ1ZXgtc3RvcmUudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNjaGVtYSB9IGZyb20gJ0BvcmJpdC9kYXRhJztcbmltcG9ydCBWdWV4U3RvcmUgZnJvbSAnLi92dWV4LXN0b3JlJztcbmltcG9ydCB7IGNyZWF0ZUxvY2FsVnVlIH0gZnJvbSAnQHZ1ZS90ZXN0LXV0aWxzJztcbmltcG9ydCBWdWV4IGZyb20gXCJ2dWV4XCI7XG5jb25zdCBsb2NhbFZ1ZSA9IGNyZWF0ZUxvY2FsVnVlKCk7XG5sb2NhbFZ1ZS51c2UoVnVleCk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBzY2hlbWFEZWZpbml0aW9uID0ge1xuICAgIG1vZGVsczoge1xuICAgICAgICBwZXQ6IHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNwZWNpZXM6IHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYShzY2hlbWFEZWZpbml0aW9uKTtcbmxldCB2U3RvcmUgPSBuZXcgVnVleFN0b3JlKHsgc2NoZW1hIH0pO1xubGV0IHN0b3JlID0gbmV3IFZ1ZXguU3RvcmUoe1xuICAgIG1vZHVsZXM6IHtcbiAgICAgICAgdlN0b3JlXG4gICAgfSxcbiAgICBzdHJpY3Q6IHRydWUsXG4gICAgcGx1Z2luczogW11cbn0pO1xuZGVzY3JpYmUoXCJzaW1wbGUgZXhhbXBsZVwiLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIHZTdG9yZSA9IG5ldyBWdWV4U3RvcmUoeyBzY2hlbWEgfSk7XG4gICAgICAgIHN0b3JlID0gbmV3IFZ1ZXguU3RvcmUoe1xuICAgICAgICAgICAgbW9kdWxlczoge1xuICAgICAgICAgICAgICAgIHZTdG9yZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgICAgIHBsdWdpbnM6IFtdXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRlc3QoXCJtb2RlbHMgcHJlc2VudFwiLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzdG9yZS5nZXR0ZXJzLmdldEZpZWxkKCdwZXRDb2xsZWN0aW9uJykpLnRvTWF0Y2hPYmplY3QoW10pO1xuICAgICAgICBleHBlY3Qoc3RvcmUuZ2V0dGVycy5nZXRGaWVsZCgncGV0JykpLnRvQmVOdWxsKCk7XG4gICAgICAgIGV4cGVjdChzdG9yZS5nZXR0ZXJzLmdldEZpZWxkKCdzcGVjaWVzQ29sbGVjdGlvbicpKS50b01hdGNoT2JqZWN0KFtdKTtcbiAgICAgICAgZXhwZWN0KHN0b3JlLmdldHRlcnMuZ2V0RmllbGQoJ3NwZWNpZXMnKSkudG9CZU51bGwoKTtcbiAgICB9KTtcbiAgICB0ZXN0KFwiYWRkaW5nIHdvcmtzXCIsIGRvbmUgPT4ge1xuICAgICAgICBzdG9yZS5kaXNwYXRjaCgnY3JlYXRlJywge1xuICAgICAgICAgICAgdHlwZTogJ3BldCcsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ0dhcmZpZWxkJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHN0b3JlLmdldHRlcnMuZ2V0RmllbGQoJ3BldENvbGxlY3Rpb24nKSk7XG4gICAgICAgICAgICBleHBlY3Qoc3RvcmUuZ2V0dGVycy5nZXRGaWVsZCgncGV0LmF0dHJpYnV0ZXMubmFtZScpKS50b0JlKFwiR2FyZmllbGRcIik7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7Il19